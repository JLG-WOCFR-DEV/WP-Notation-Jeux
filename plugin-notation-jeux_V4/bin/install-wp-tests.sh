#!/usr/bin/env bash
# Heavily inspired by the official script generated by `wp scaffold plugin-tests`.
# Installs WordPress for running the PHPUnit integration suite.

set -e

DB_NAME=${1:-wordpress_test}
DB_USER=${2:-root}
DB_PASS=${3:-''}
DB_HOST=${4:-localhost}
WP_VERSION=${5:-latest}
SKIP_DB_CREATE=${6:-false}

WP_TESTS_DIR=${WP_TESTS_DIR:-$(pwd)/tests/integration/wordpress-tests-lib}
WP_CORE_DIR=${WP_CORE_DIR:-$(pwd)/tests/integration/wordpress}
DOWNLOAD_CACHE=${DOWNLOAD_CACHE:-/tmp/wp-tests-download-cache}

set +e
command -v curl >/dev/null 2>&1
CURL_INSTALLED=$?
set -e

if [ $CURL_INSTALLED -ne 0 ]; then
    echo 'Could not find "curl". Please install it or ensure it is on the PATH.' >&2
    exit 1
fi

mkdir -p "$WP_TESTS_DIR" "$WP_CORE_DIR" "$DOWNLOAD_CACHE"

download() {
    local url=$1
    local dest=$2

    if [ -f "$dest" ]; then
        return 0
    fi

    curl -s -L "$url" -o "$dest"
}

install_wp() {
    if [ -f "$WP_CORE_DIR/wp-load.php" ]; then
        return
    fi

    local archive_name="wordpress-${WP_VERSION}.tar.gz"
    local archive_path="$DOWNLOAD_CACHE/${archive_name}"
    local wp_tarball_url="https://wordpress.org/${archive_name}"

    if [ "$WP_VERSION" = "latest" ]; then
        archive_name="wordpress.tar.gz"
        archive_path="$DOWNLOAD_CACHE/${archive_name}"
        wp_tarball_url="https://wordpress.org/${archive_name}"
    fi

    download "$wp_tarball_url" "$archive_path"

    tar --strip-components=1 -zxmf "$archive_path" -C "$WP_CORE_DIR"
}

install_test_suite() {
    if [ -f "$WP_TESTS_DIR/includes/functions.php" ]; then
        return
    fi

    local svn_url='https://develop.svn.wordpress.org/trunk/tests/phpunit'

    case "$WP_VERSION" in
        latest|trunk|nightly)
            svn_url='https://develop.svn.wordpress.org/trunk/tests/phpunit'
            ;;
        *)
            svn_url="https://develop.svn.wordpress.org/tags/${WP_VERSION}/tests/phpunit"
            ;;
    esac

    rm -rf "$WP_TESTS_DIR"
    mkdir -p "$WP_TESTS_DIR"

    svn co --quiet "$svn_url" "$WP_TESTS_DIR"
}


create_db() {
    if [ "$SKIP_DB_CREATE" = "true" ]; then
        return
    fi

    mysqladmin create "$DB_NAME" --user="$DB_USER" --password="$DB_PASS" --host="$DB_HOST" --silent || true
}

install_wp
install_test_suite
create_db

cat > "$WP_TESTS_DIR/wp-tests-config.php" <<CFG
<?php
/* This file is generated by bin/install-wp-tests.sh */
define( 'DB_NAME', '$DB_NAME' );
define( 'DB_USER', '$DB_USER' );
define( 'DB_PASSWORD', '$DB_PASS' );
define( 'DB_HOST', '$DB_HOST' );
define( 'DB_CHARSET', 'utf8' );
define( 'DB_COLLATE', '' );
define( 'TABLE_PREFIX', 'wp_' );

define( 'WP_DEBUG', true );

define( 'WP_TESTS_DOMAIN', 'example.org' );
define( 'WP_TESTS_EMAIL', 'admin@example.org' );
define( 'WP_TESTS_TITLE', 'Test Blog' );

define( 'WP_PHP_BINARY', 'php' );

define( 'WPLANG', '' );
CFG

if [ "$WP_VERSION" = "latest" ]; then
    cat >> "$WP_TESTS_DIR/wp-tests-config.php" <<CFG
$config_file_path = dirname( __FILE__ ) . '/wp-tests-config.php';
if ( file_exists( dirname( __DIR__ ) . '/src/wp-tests-config.php' ) ) {
    $config_file_path = dirname( __DIR__ ) . '/src/wp-tests-config.php';
}
CFG
fi

cat >> "$WP_TESTS_DIR/wp-tests-config.php" <<'CFG'
define( 'WP_TESTS_CONFIGURATIONS_INCLUDED', true );
CFG

if ! grep -q "ABSPATH" "$WP_TESTS_DIR/wp-tests-config.php"; then
cat >> "$WP_TESTS_DIR/wp-tests-config.php" <<'CFG'
if ( ! defined( 'ABSPATH' ) ) {
    define( 'ABSPATH', dirname( __FILE__ ) . '/src/' );
}
CFG
fi

